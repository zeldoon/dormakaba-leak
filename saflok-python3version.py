import sys

MAGIC_TABLE_SIZE = 192
KEY_LENGTH = 6
UID_LENGTH = 4

def main(argv):
    if len(argv) != 2:
        print(f"Usage: {argv[0]} <32-bit uid value in hexadecimal format>")
        return 1

    magic_table = [
        0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0xF0, 0x57, 0xB3, 0x9E, 0xE3, 0xD8,
        0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x96, 0x9D, 0x95, 0x4A, 0xC1, 0x57,
        0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x8F, 0x43, 0x58, 0x0D, 0x2C, 0x9D,
        0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0xFF, 0xCC, 0xE0, 0x05, 0x0C, 0x43,
        0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x34, 0x1B, 0x15, 0xA6, 0x90, 0xCC,
        0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x89, 0x58, 0x56, 0x12, 0xE7, 0x1B,
        0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0xBB, 0x74, 0xB0, 0x95, 0x36, 0x58,
        0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0xFB, 0x97, 0xF8, 0x4B, 0x5B, 0x74,
        0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0xC9, 0xD1, 0x88, 0x35, 0x9F, 0x92,
        0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x8F, 0x92, 0xE9, 0x7F, 0x58, 0x97,
        0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x16, 0x6C, 0xA2, 0xB0, 0x9F, 0xD1,
        0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x27, 0xDD, 0x93, 0x10, 0x1C, 0x6C,
        0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0xDA, 0x3E, 0x3F, 0xD6, 0x49, 0xDD,
        0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x58, 0xDD, 0xED, 0x07, 0x8E, 0x3E,
        0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x5C, 0xD0, 0x05, 0xCF, 0xD9, 0x07,
        0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x11, 0x8D, 0xD0, 0x01, 0x87, 0xD0
    ]

    uid_hex = argv[1]
    uid = bytes.fromhex(uid_hex)
    
    if len(uid) != UID_LENGTH:
        print("Invalid UID length. Expected a 32-bit value.")
        return 1

    magic_byte = (uid[3] >> 4) + (uid[2] >> 4) + (uid[0] & 0x0F)
    magickal_index = (magic_byte & 0x0F) * 12 + 11

    key = [magic_byte, uid[0], uid[1], uid[2], uid[3], magic_byte]
    carry_sum = 0

    for i in range(KEY_LENGTH - 1, -1, -1):
        if magickal_index < 0:
            break
        keysum = key[i] + magic_table[magickal_index]
        key[i] = (keysum & 0xFF) + carry_sum
        carry_sum = keysum >> 8
        magickal_index -= 1

    print("Generated Key: ", end="")
    for byte in key:
        print(f"{byte:02X}", end="")
    print()

    return 0

if __name__ == "__main__":
    import sys
    main(sys.argv)
